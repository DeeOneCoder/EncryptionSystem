package com.Davidson.EncryptionSystem.encryptor;

/*
 * To change U07CS1087_MainClass.this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * U07CS1087_MainClass.java
 *
 * Created on Oct 12, 2011, 12:08:35 AM
 */



import java.awt.event.*;
import javax.swing.*;
import java.io.*;
import javax.swing.filechooser.*;
import java.util.StringTokenizer;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author Administrator
 */
public class U07CS1087_MainClass extends JFrame {

    /** Creates new form U07CS1087_MainClass */
    public U07CS1087_MainClass() {
        setTitle( "Data Encryption Software");
        setResizable( false );
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify U07CS1087_MainClass.this code. The content of U07CS1087_MainClass.this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        loginPanel = new JPanel();
        jPanel3 = new JPanel();
        jPanel1 = new JPanel();
        softwareTitle = new JLabel();
        loginLabel = new JLabel();
        jPanel4 = new JPanel();
        jPanel5 = new JPanel();
        jLabel3 = new JLabel();
        jLabel7 = new JLabel();
        uname = new JTextField();
        pword = new JPasswordField();
        login = new JButton();
        cancel = new JButton();
        homePanel = new JPanel();
        jPanel6 = new JPanel();
        jPanel7 = new JPanel();
        jLabel8 = new JLabel();
        encHome = new JButton();
        decHome = new JButton();
        user = new JButton();
        logout = new JButton();
        helpPanel = new JPanel();
        helpPane = new JScrollPane();
        jTextArea1 = new JTextArea();
        help = new JButton();
        decHomePanel = new JPanel();
        jPanel8 = new JPanel();
        jPanel9 = new JPanel();
        jLabel9 = new JLabel();
        proceed = new JButton();
        read = new JButton();
        canDec = new JButton();
        jLabel4 = new JLabel();
        readPanel = new JPanel();
        jPanel10 = new JPanel();
        jPanel11 = new JPanel();
        jLabel5 = new JLabel();
        jLabel6 = new JLabel();
        fPath = new JTextField();
        browse = new JButton();
        done = new JButton();
        canRead = new JButton();
        encPanel = new JPanel();
        jPanel12 = new JPanel();
        jPanel13 = new JPanel();
        home = new JButton();
        jScrollPane1 = new JScrollPane();
        encTextArea = new JTextArea();
        encButt = new JButton();
        clearEncButt = new JButton();
        jLabel18 = new JLabel();
        encryptedPanel = new JPanel();
        jPanel14 = new JPanel();
        jPanel15 = new JPanel();
        home1 = new JButton();
        jScrollPane2 = new JScrollPane();
        encrypted = new JTextArea();
        save = new JButton();
        backEnc = new JButton();
        jLabel19 = new JLabel();
        decPanel = new JPanel();
        jPanel16 = new JPanel();
        jPanel17 = new JPanel();
        home2 = new JButton();
        jScrollPane3 = new JScrollPane();
        decTextArea = new JTextArea();
        decButt = new JButton();
        clearDecButt = new JButton();
        jLabel20 = new JLabel();
        decryptedPanel = new JPanel();
        jPanel18 = new JPanel();
        jPanel19 = new JPanel();
        home3 = new JButton();
        jScrollPane4 = new JScrollPane();
        decrypted = new JTextArea();
        save1 = new JButton();
        backDec = new JButton();
        jLabel21 = new JLabel();
        userPanel = new JPanel();
        jPanel20 = new JPanel();
        jPanel21 = new JPanel();
        jLabel11 = new JLabel();
        add = new JButton();
        del = new JButton();
        logout1 = new JButton();
        addPanel = new JPanel();
        jLabel12 = new JLabel();
        jLabel13 = new JLabel();
        detFull = new JTextField();
        detName = new JTextField();
        jLabel14 = new JLabel();
        jLabel15 = new JLabel();
        detPass = new JTextField();
        jLabel16 = new JLabel();
        jComboBox1 = new JComboBox();
        ok = new JButton();
        done2 = new JButton();
        delPanel = new JPanel();
        jLabel17 = new JLabel();
        dNames = new JComboBox();
        userDel = new JButton();
        jPanel22 = new JPanel();
        jLabel10 = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        loginPanel.setPreferredSize(new java.awt.Dimension(960, 680));

        jPanel3.setBackground(new java.awt.Color(0, 255, 255));

        softwareTitle.setFont(new java.awt.Font("Tahoma", 1, 14));
        softwareTitle.setText("DATA ENCRYPTION SOFTWARE");

        loginLabel.setText("Enter Login Details to Continue....");

        jPanel4.setBackground(new java.awt.Color(102, 255, 255));

        jLabel3.setText("Username:");

        jLabel7.setText("Password:");

        uname.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                unameActionPerformed(evt);
            }
        });

        pword.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                pwordActionPerformed(evt);
            }
        });

        GroupLayout jPanel5Layout = new GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(pword)
                    .addComponent(uname, GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(uname, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(pword, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        login.setText("Login");
        login.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        cancel.setText("Cancel");
        cancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(login, GroupLayout.PREFERRED_SIZE, 125, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancel, GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(cancel, GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addComponent(login, GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE))
                .addContainerGap())
        );

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.CENTER)
                            .addComponent(loginLabel)
                            .addComponent(softwareTitle))))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(softwareTitle, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginLabel)
                .addGap(31, 31, 31)
                .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout loginPanelLayout = new GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(174, 174, 174)
                .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(214, Short.MAX_VALUE))
        );
        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(163, 163, 163)
                .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(189, Short.MAX_VALUE))
        );

        homePanel.setPreferredSize(new java.awt.Dimension(960, 680));
        homePanel.setVisible( false );

        jPanel6.setBackground(new java.awt.Color(0, 255, 255));

        jLabel8.setFont(new java.awt.Font("Monospaced", 1, 16));
        jLabel8.setText("MAIN MENU");

        encHome.setText("ENCRYPT");
        encHome.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                encHomeActionPerformed(evt);
            }
        });

        decHome.setText("DECRYPT");
        decHome.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                decHomeActionPerformed(evt);
            }
        });

        user.setText("USER MGT");
        user.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                userActionPerformed(evt);
            }
        });
    		
        logout.setText("LOGOUT");
        logout.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 1, 14));
        jTextArea1.setRows(5);
        jTextArea1.setText(">>>\tHELP\t<<<\n\n>>> Click on \"ENCRYPT\" to encrypt plaintext into ciphertext.\n\n>>> Click on \"DECRYPT\" to decrypt ciphertext back into plaintext.\n\n>>> Click on \"USER MGT\" if you are an administrative user,\n    you can add or delete user from the user management\n    interface.\n\n>>> Click on \"LOGOUT\" to exit this interface.\n    You will have to enter your login details to use the \n    software again.");
        jTextArea1.setWrapStyleWord(true);
        helpPane.setViewportView(jTextArea1);

        GroupLayout helpPanelLayout = new GroupLayout(helpPanel);
        helpPanel.setLayout(helpPanelLayout);
        helpPanelLayout.setHorizontalGroup(
            helpPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(helpPane, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
        );
        helpPanelLayout.setVerticalGroup(
            helpPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(helpPane, GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
        );
        helpPanel.setVisible( false );

        help.setText("<<<  Help  >>>");
        help.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });

        GroupLayout jPanel7Layout = new GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addComponent(jLabel8)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 225, GroupLayout.PREFERRED_SIZE))
                    .addGroup(GroupLayout.Alignment.TRAILING, jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(help)
                        .addGroup(jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(helpPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addGroup(GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addComponent(encHome, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(decHome, GroupLayout.PREFERRED_SIZE, 113, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(user, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(logout, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE)))))
                .addGap(33, 33, 33))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(encHome, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE)
                    .addComponent(decHome, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE)
                    .addComponent(user, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE)
                    .addComponent(logout, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(help)
                .addGap(18, 18, 18)
                .addComponent(helpPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        GroupLayout jPanel6Layout = new GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        GroupLayout homePanelLayout = new GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addComponent(jPanel6, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(166, Short.MAX_VALUE))
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jPanel6, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
        );

        decHomePanel.setPreferredSize(new java.awt.Dimension(960, 680));
        decHomePanel.setVisible( false );

        jPanel8.setBackground(new java.awt.Color(0, 255, 255));

        jLabel9.setFont(new java.awt.Font("Monospaced", 1, 16));
        jLabel9.setText("DECRYPTION MENU");

        proceed.setText("Proceed >>>");
        proceed.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                proceedActionPerformed(evt);
            }
        });

        read.setText("Read from file");
        read.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                readActionPerformed(evt);
            }
        });

        canDec.setText("Cancel");
        canDec.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                canDecActionPerformed(evt);
            }
        });

        jLabel4.setText("Click on proceed if you wish to copy and paste the text. Please copy all the text before pasting.");

        GroupLayout jPanel9Layout = new GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(jPanel9Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(jLabel9))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(proceed, GroupLayout.PREFERRED_SIZE, 116, GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(read, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(canDec, GroupLayout.PREFERRED_SIZE, 115, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel9, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanel9Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(proceed, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                    .addComponent(read, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                    .addComponent(canDec, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addComponent(jLabel4)
                .addGap(62, 62, 62))
        );

        GroupLayout jPanel8Layout = new GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addContainerGap())
        );

        GroupLayout decHomePanelLayout = new GroupLayout(decHomePanel);
        decHomePanel.setLayout(decHomePanelLayout);
        decHomePanelLayout.setHorizontalGroup(
            decHomePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(decHomePanelLayout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addComponent(jPanel8, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(183, Short.MAX_VALUE))
        );
        decHomePanelLayout.setVerticalGroup(
            decHomePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(decHomePanelLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jPanel8, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(349, Short.MAX_VALUE))
        );

        readPanel.setPreferredSize(new java.awt.Dimension(960, 680));
        readPanel.setVisible( false );

        jPanel10.setBackground(new java.awt.Color(0, 255, 255));

        jLabel5.setText("e.g. Filename.ext");

        jLabel6.setText("Enter File Path:");

        fPath.setToolTipText("Enter file path and press enter");
        fPath.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                fPathActionPerformed(evt);
            }
        });
        fPath.addFocusListener(new FocusAdapter() {
            public void focusGained(FocusEvent evt) {
                fPathFocusGained(evt);
            }
        });

        browse.setText("Browse");
        browse.setToolTipText("Click to browse");
        browse.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        done.setText("Done");
        done.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                doneActionPerformed(evt);
            }
        });

        canRead.setText("Cancel");
        canRead.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                canReadActionPerformed(evt);
            }
        });

        GroupLayout jPanel11Layout = new GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel11Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel6, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fPath, GroupLayout.PREFERRED_SIZE, 322, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(browse, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(done, GroupLayout.PREFERRED_SIZE, 73, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canRead, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(35, 35, 35)
                .addGroup(jPanel11Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
                    .addComponent(fPath, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse)
                    .addComponent(done)
                    .addComponent(canRead))
                .addContainerGap(100, Short.MAX_VALUE))
        );

        fPath.getAccessibleContext().setAccessibleName("");

        GroupLayout jPanel10Layout = new GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel11, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout readPanelLayout = new GroupLayout(readPanel);
        readPanel.setLayout(readPanelLayout);
        readPanelLayout.setHorizontalGroup(
            readPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(readPanelLayout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(jPanel10, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );
        readPanelLayout.setVerticalGroup(
            readPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(readPanelLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jPanel10, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(417, Short.MAX_VALUE))
        );

        encPanel.setPreferredSize(new java.awt.Dimension(960, 680));
        encPanel.setVisible( false );

        jPanel12.setBackground(new java.awt.Color(0, 255, 255));

        home.setText("<< Home >>");
        home.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setAutoscrolls(true);

        encTextArea.setColumns(20);
        encTextArea.setFont(new java.awt.Font("Monospaced", 0, 14));
        encTextArea.setLineWrap(true);
        encTextArea.setRows(5);
        encTextArea.setToolTipText("Type your text here");
        jScrollPane1.setViewportView(encTextArea);

        encButt.setText("Encrypt>>");
        encButt.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                encButtActionPerformed(evt);
            }
        });

        clearEncButt.setText("Clear");
        clearEncButt.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                clearEncButtActionPerformed(evt);
            }
        });

        jLabel18.setText("Type your text in the space provided below (or press Ctrl + V to paste), then Click \"Encrypt\" to continue...");

        GroupLayout jPanel13Layout = new GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(encButt, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(clearEncButt, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 280, Short.MAX_VALUE)
                        .addComponent(home, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel13Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(home, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 520, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(encButt, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearEncButt, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        GroupLayout jPanel12Layout = new GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        GroupLayout encPanelLayout = new GroupLayout(encPanel);
        encPanel.setLayout(encPanelLayout);
        encPanelLayout.setHorizontalGroup(
            encPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(encPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        encPanelLayout.setVerticalGroup(
            encPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(encPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        encryptedPanel.setPreferredSize(new java.awt.Dimension(960, 680));
        encryptedPanel.setVisible( false );

        jPanel14.setBackground(new java.awt.Color(0, 255, 255));

        home1.setText("<< Home >>");
        home1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                home1ActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        encrypted.setColumns(20);
        encrypted.setEditable(false);
        encrypted.setFont(new java.awt.Font("Monospaced", 0, 14));
        encrypted.setLineWrap(true);
        encrypted.setRows(5);
        jScrollPane2.setViewportView(encrypted);

        save.setText("Save to File");
        save.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        backEnc.setText("<< Back");
        backEnc.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                backEncActionPerformed(evt);
            }
        });

        jLabel19.setText("Encryption Successful...Copy and paste output or Click \"save to file\" to save in file (.doc and .txt only)");

        GroupLayout jPanel15Layout = new GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(save, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(backEnc, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 300, Short.MAX_VALUE)
                        .addComponent(home1, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel15Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(home1, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 520, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(save, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
                    .addComponent(backEnc, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        GroupLayout jPanel14Layout = new GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel15, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel15, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        GroupLayout encryptedPanelLayout = new GroupLayout(encryptedPanel);
        encryptedPanel.setLayout(encryptedPanelLayout);
        encryptedPanelLayout.setHorizontalGroup(
            encryptedPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(encryptedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        encryptedPanelLayout.setVerticalGroup(
            encryptedPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(encryptedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        decPanel.setPreferredSize(new java.awt.Dimension(960, 680));
        decPanel.setVisible( false );

        jPanel16.setBackground(new java.awt.Color(0, 255, 255));

        home2.setText("<< Home >>");
        home2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                home2ActionPerformed(evt);
            }
        });

        jScrollPane3.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        decTextArea.setColumns(20);
        decTextArea.setFont(new java.awt.Font("Monospaced", 0, 14));
        decTextArea.setLineWrap(true);
        decTextArea.setRows(5);
        jScrollPane3.setViewportView(decTextArea);

        decButt.setText("Decrypt >>");
        decButt.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                decButtActionPerformed(evt);
            }
        });

        clearDecButt.setText("Clear");
        clearDecButt.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                clearDecButtActionPerformed(evt);
            }
        });

        jLabel20.setText("Type your text in the space provided below (or press Ctrl + V to paste), then Click \"Decrypt\" to continue...");

        GroupLayout jPanel17Layout = new GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(decButt, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(clearDecButt, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 279, Short.MAX_VALUE)
                        .addComponent(home2, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel17Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(home2, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 520, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel17Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(decButt, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearDecButt, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        GroupLayout jPanel16Layout = new GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel17, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel17, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        GroupLayout decPanelLayout = new GroupLayout(decPanel);
        decPanel.setLayout(decPanelLayout);
        decPanelLayout.setHorizontalGroup(
            decPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(decPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        decPanelLayout.setVerticalGroup(
            decPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(decPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        decryptedPanel.setPreferredSize(new java.awt.Dimension(960, 680));
        decryptedPanel.setVisible( false );

        jPanel18.setBackground(new java.awt.Color(0, 255, 255));

        home3.setText("<< Home >>");
        home3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                home3ActionPerformed(evt);
            }
        });

        jScrollPane4.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        decrypted.setColumns(20);
        decrypted.setEditable(false);
        decrypted.setFont(new java.awt.Font("Monospaced", 0, 14));
        decrypted.setLineWrap(true);
        decrypted.setRows(5);
        jScrollPane4.setViewportView(decrypted);

        save1.setText("Save to File");
        save1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                save1ActionPerformed(evt);
            }
        });

        backDec.setText("<< Back");
        backDec.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                backDecActionPerformed(evt);
            }
        });

        jLabel21.setText("Decryption Successful...Copy and paste output or Click \"save to file\" to save in file (.doc and .txt only)");

        GroupLayout jPanel19Layout = new GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addComponent(save1, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(backDec, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 299, Short.MAX_VALUE)
                        .addComponent(home3, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel19Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(home3, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, GroupLayout.PREFERRED_SIZE, 520, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel19Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(save1, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
                    .addComponent(backDec, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        GroupLayout jPanel18Layout = new GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        GroupLayout decryptedPanelLayout = new GroupLayout(decryptedPanel);
        decryptedPanel.setLayout(decryptedPanelLayout);
        decryptedPanelLayout.setHorizontalGroup(
            decryptedPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(decryptedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel18, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        decryptedPanelLayout.setVerticalGroup(
            decryptedPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(decryptedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel18, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        userPanel.setPreferredSize(new java.awt.Dimension(960, 680));
        userPanel.setVisible( false );

        jPanel20.setBackground(new java.awt.Color(0, 255, 255));

        jPanel21.setPreferredSize(new java.awt.Dimension(686, 680));

        jLabel11.setFont(new java.awt.Font("Monospaced", 1, 16)); // NOI18N
        jLabel11.setText("User Management");

        add.setText("Add User");
        add.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        del.setText("Delete User");
        del.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                delActionPerformed(evt);
            }
        });

        logout1.setText("Cancel");
        logout1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                logout1ActionPerformed(evt);
            }
        });

        addPanel.setBackground(new java.awt.Color(153, 255, 255));
        addPanel.setVisible( false );

        jLabel12.setFont(new java.awt.Font("Monospaced", 1, 12));
        jLabel12.setText("Enter User Detail and Click Done or Ok to add more users...");

        jLabel13.setText("Name: ");

        detFull.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                detFullActionPerformed(evt);
            }
        });

        detName.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                detNameActionPerformed(evt);
            }
        });

        jLabel14.setText("Username: ");

        jLabel15.setText("Password: ");

        jLabel16.setText("Access Level: ");

        jComboBox1.setModel(new DefaultComboBoxModel(new String[] { "Normal User", "Admin User"}));
        jComboBox1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        ok.setText("Ok (Add another)");
        ok.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                okActionPerformed(evt);
            }
        });

        done2.setText("Done");
        done2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                done2ActionPerformed(evt);
            }
        });

        GroupLayout addPanelLayout = new GroupLayout(addPanel);
        addPanel.setLayout(addPanelLayout);
        addPanelLayout.setHorizontalGroup(
            addPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(addPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                        .addGroup(addPanelLayout.createSequentialGroup()
                            .addComponent(jLabel13)
                            .addGap(30, 30, 30)
                            .addComponent(detFull, GroupLayout.PREFERRED_SIZE, 401, GroupLayout.PREFERRED_SIZE))
                        .addGroup(addPanelLayout.createSequentialGroup()
                            .addGroup(addPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                .addGroup(addPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel16)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jComboBox1, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(GroupLayout.Alignment.LEADING, addPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel14)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(detName, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE)))
                            .addGroup(addPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(addPanelLayout.createSequentialGroup()
                                    .addGap(26, 26, 26)
                                    .addComponent(jLabel15)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(detPass))
                                .addGroup(addPanelLayout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(ok, GroupLayout.PREFERRED_SIZE, 118, GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(done2, GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)))))
                    .addComponent(jLabel12))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        addPanelLayout.setVerticalGroup(
            addPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addGroup(addPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(detFull, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(detName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(detPass, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(ok, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                    .addComponent(done2, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        delPanel.setBackground(new java.awt.Color(153, 255, 255));
        delPanel.setVisible( false );

        jLabel17.setFont(new java.awt.Font("Monospaced", 1, 12));
        jLabel17.setText("Delete User (Select a user)");
        
        StringTokenizer tokenizer = new StringTokenizer( readNames(), "*");
		while( tokenizer.hasMoreTokens( ))
		{
			dNames.addItem( new String( tokenizer.nextToken()));
		}


        userDel.setText("Delete");
        userDel.addActionListener( new ActionListener()
        {
        public void actionPerformed( ActionEvent event )
        {
        Connection connection = null;
        Statement statement = null;
        Object a = dNames.getSelectedItem();
        String nm = (String)a;

   		String query = "DELETE from user_details WHERE name = \"" + nm + "\"";
   		
    	try
		{
			Class.forName( "com.mysql.jdbc.Driver" );
    		connection = DriverManager.getConnection( "jdbc:mysql://localhost/users", "root", "" );
    		statement = connection.createStatement();
    		statement.executeUpdate( query );
    		delPanel.setVisible( false );
    		dNames.removeAllItems();
    		delPanel.setVisible( false );
    		StringTokenizer tokenizer = new StringTokenizer( readNames(), "*");
			while( tokenizer.hasMoreTokens( ))
			{
				dNames.addItem( new String( tokenizer.nextToken()));
			}
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "User \"" + nm + "\" successfully deleted", "Operation Successful", JOptionPane.ERROR_MESSAGE );
    		delPanel.setVisible( true );
    		repaint();
        	
		}
		catch( SQLException exception )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, exception.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	catch( ClassNotFoundException exception )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Unable to open database, Please try again!", "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	finally
        {
        	try
        	{
        		connection.close();
        		statement.close();
        	}
        	catch( Exception exception )
    		{
    			JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Unable to close Database or Connection", "Error", JOptionPane.ERROR_MESSAGE );
    			return;
    		}
        }
        	}
        });

        GroupLayout delPanelLayout = new GroupLayout(delPanel);
        delPanel.setLayout(delPanelLayout);
        delPanelLayout.setHorizontalGroup(
            delPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(delPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(delPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(delPanelLayout.createSequentialGroup()
                        .addComponent(dNames, GroupLayout.PREFERRED_SIZE, 349, GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(userDel, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel17))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        delPanelLayout.setVerticalGroup(
            delPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(delPanelLayout.createSequentialGroup()
                .addGroup(delPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(delPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(dNames))
                    .addGroup(delPanelLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(userDel, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        GroupLayout jPanel21Layout = new GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(jPanel21Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                    .addComponent(delPanel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(GroupLayout.Alignment.LEADING, jPanel21Layout.createSequentialGroup()
                        .addComponent(add, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE)
                        .addGap(91, 91, 91)
                        .addComponent(del, GroupLayout.PREFERRED_SIZE, 113, GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addComponent(logout1, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE))
                    .addComponent(addPanel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(78, Short.MAX_VALUE))
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                .addContainerGap(271, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addGap(265, 265, 265))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel21Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(add, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE)
                    .addComponent(logout1, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE)
                    .addComponent(del, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(addPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(delPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        GroupLayout jPanel20Layout = new GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel21, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel21, GroupLayout.PREFERRED_SIZE, 557, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout userPanelLayout = new GroupLayout(userPanel);
        userPanel.setLayout(userPanelLayout);
        userPanelLayout.setHorizontalGroup(
            userPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(userPanelLayout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(jPanel20, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(133, Short.MAX_VALUE))
        );
        userPanelLayout.setVerticalGroup(
            userPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(userPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jPanel20, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        jPanel22.setBackground(new java.awt.Color(153, 255, 255));

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        jLabel10.setText("Designed By: Akinade Adepoju D. (U07CS1087)         Supervised By: Dr. M. B. Hammawa");

        GroupLayout jPanel22Layout = new GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel10)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addContainerGap())
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(loginPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(homePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(decHomePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(readPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(encPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(encryptedPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(decPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(decryptedPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(userPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(119, Short.MAX_VALUE)
                .addComponent(jPanel22, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(loginPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(homePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decHomePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(readPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encryptedPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decryptedPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel22, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>
	
	private String readNames()
	{
		Connection connection = null;
		Statement statement = null;
		String mid = "*";
		String toArray = "";
		try
    	{
    		Class.forName( "com.mysql.jdbc.Driver" );
    		connection = DriverManager.getConnection( "jdbc:mysql://localhost/users", "root", "" );
    		statement = connection.createStatement();
    		String query = "SELECT name FROM user_details";
    		ResultSet resultSet = statement.executeQuery( query );
    		
    		while( resultSet.next() )
    		{
    			toArray += resultSet.getString( "name" );
    			toArray += mid;
    		}
    		//System.out.println( toArray );
    		
    		return toArray;
    	}
   
    	catch( SQLException exception )
    	{
    		JOptionPane.showMessageDialog( this, "SQL Exception, try again", "Error", JOptionPane.ERROR_MESSAGE );
    		return null;
    	}
    	catch( ClassNotFoundException exception )
    	{
    		JOptionPane.showMessageDialog( this, "Unable to open database, Please try again!", "Error", JOptionPane.ERROR_MESSAGE );
    		return null;
    	}
        // TODO add your handling code here:
        finally
        {
        	try
        	{
        		connection.close();
        		statement.close();
        	}
        	catch( Exception exception )
    		{
    			JOptionPane.showMessageDialog( this, "Unable to close Database or Connection", "Error", JOptionPane.ERROR_MESSAGE );
    			return null;
    		}
        }
	}       
		
	
    private void cancelActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        uname.setText( "" );
        pword.setText( "" );
    }                                      

    private void unameActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        String user = uname.getText();
    	String pw = new String( pword.getPassword() );
    	String nameCheck = "";
    	String pwCheck = "";
    	String accessCheck = "";
    	Connection connection = null;
    	Statement statement = null;
    	if( uname.getText().equals(""))
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Username field cannot be empty", "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	if( new String(pword.getPassword()).equals("") )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Password field cannot be empty", "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	try
    	{
    		Class.forName( "com.mysql.jdbc.Driver" );
    		connection = DriverManager.getConnection( "jdbc:mysql://localhost/users", "root", "" );
    		statement = connection.createStatement();
    		String query = "SELECT name, username, password, access FROM user_details WHERE username = \"" + user + "\"";
    		ResultSet resultSet = statement.executeQuery( query );
    		int i = resultSet.findColumn( "username" );
    		int j = resultSet.findColumn( "password" );
    		int k = resultSet.findColumn( "access" );
    		int a = resultSet.findColumn( "name" );
    		
    		resultSet.next();
    		
    		nameCheck = resultSet.getString( i );
    		pwCheck = resultSet.getString( j );    		
    		accessCheck = resultSet.getString( k );
    		
    		String name = resultSet.getString( a );
    		
	    	if( nameCheck.equals( user ))
	    		{
	    		if( pwCheck.equals( pw ))
	    			{
	    			if( accessCheck.equals( "Admin User"))
	    				{
	    					loggedUser = "Admin User";
	    					loginPanel.setVisible( false );
	    					setTitle( "Data Encryption Software: You are logged in as [" + name + "]: (Admin User@DataEncryption)" );
	    					homePanel.setVisible( true );
	    				}
	    			else
	    				{
	    					loggedUser = "Normal User";
	    					loginPanel.setVisible( false );
	    					setTitle( "Data Encryption Software: You are logged in as [" + name + "]: (Normal User@DataEncryption)" );
	    					homePanel.setVisible( true );
	    				}
	    			}
	    			else
	    			{
	    				JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Invalid password; Reenter password", "Error", JOptionPane.ERROR_MESSAGE );
	    				pword.setText("");
	    				return;
	    			}	    		
	    		}
	    		else
	    		{
	    			JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Invalid Username; Reenter username", "Error", JOptionPane.ERROR_MESSAGE );
	    			uname.setText("");
	    			return;
	    		}
	    		
    		
    	}
   
    	catch( SQLException exception )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, exception.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	catch( ClassNotFoundException exception )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, exception.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
        // TODO add your handling code here:
        finally
        {
        	try
        	{
        		connection.close();
        		statement.close();
        	}
        	catch( Exception e )
    		{
    			JOptionPane.showMessageDialog( U07CS1087_MainClass.this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );
    			return;
    		}
        }

    }
    
    private File getFile()
        {
        	JFileChooser fChooser = new JFileChooser();
        	FileNameExtensionFilter fF = new FileNameExtensionFilter("Word Documents & Text Files", "txt", "doc");
        	fChooser.setFileSelectionMode( JFileChooser.FILES_AND_DIRECTORIES );
        	int chosen = fChooser.showOpenDialog( this );
        	fChooser.setVisible( true );
        	
        	if( chosen == JFileChooser.CANCEL_OPTION )
        		System.exit( 1 );
        	
        	File fileName = fChooser.getSelectedFile( );
        	
        	if( ( fileName == null) || fileName.getName().equals(""))
        	{
        		JOptionPane.showMessageDialog( this, "Invalid File Name", "Invalid File Name", JOptionPane.ERROR_MESSAGE );
        		System.exit( 1 );
        	}
        	
        	return fileName;
        }
    
    private File chooseFile()
       	{
   		    JFileChooser choosefile = new JFileChooser();
 			File nownow = null;
 			choosefile.setFileSelectionMode(JFileChooser.FILES_ONLY);
 			choosefile.setDialogType(JFileChooser.OPEN_DIALOG);
 			choosefile.setDialogTitle("Import");
 			int yes = choosefile.showOpenDialog( U07CS1087_MainClass.this );
 			if( yes == JFileChooser.APPROVE_OPTION )
 			{
 				nownow = choosefile.getSelectedFile();
 				if( nownow.exists() )
 				{
 					choosefile.setCurrentDirectory(nownow);
 					if(nownow.isFile())
 					{}
 				else 
 				{
 					JOptionPane.showMessageDialog(U07CS1087_MainClass.this,"This is not a file", "Error", JOptionPane.ERROR_MESSAGE );
 					nownow = null;
 				}
 			}
 				else 
 					{
 					JOptionPane.showMessageDialog(U07CS1087_MainClass.this,"This file does not exist", "Error", JOptionPane.ERROR_MESSAGE );
 					nownow=null;
 					}
 		
 	 	}
 			return nownow;

 
 		}                                     

    private void pwordActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        String user = uname.getText();
    	String pw = new String( pword.getPassword() );
    	String nameCheck = "";
    	String pwCheck = "";
    	String accessCheck = "";
    	Connection connection = null;
    	Statement statement = null;
    	if( uname.getText().equals(""))
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Username field cannot be empty", "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	if( new String(pword.getPassword()).equals("") )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Password field cannot be empty", "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	try
    	{
    		Class.forName( "com.mysql.jdbc.Driver" );
    		connection = DriverManager.getConnection( "jdbc:mysql://localhost/users", "root", "" );
    		statement = connection.createStatement();
    		String query = "SELECT name, username, password, access FROM user_details WHERE username = \"" + user + "\"";
    		ResultSet resultSet = statement.executeQuery( query );
    		int i = resultSet.findColumn( "username" );
    		int j = resultSet.findColumn( "password" );
    		int k = resultSet.findColumn( "access" );
    		int a = resultSet.findColumn( "name" );
    		
    		resultSet.next();
    		
    		nameCheck = resultSet.getString( i );
    		pwCheck = resultSet.getString( j );    		
    		accessCheck = resultSet.getString( k );
    		
    		String name = resultSet.getString( a );
    		
	    	if( nameCheck.equals( user ))
	    		{
	    		if( pwCheck.equals( pw ))
	    			{
	    			if( accessCheck.equals( "Admin User"))
	    				{
	    					loggedUser = "Admin User";
	    					loginPanel.setVisible( false );
	    					setTitle( "Data Encryption Software: You are logged in as [" + name + "]: (Admin User@DataEncryption)" );
	    					homePanel.setVisible( true );
	    				}
	    			else
	    				{
	    					loggedUser = "Normal User";
	    					loginPanel.setVisible( false );
	    					setTitle( "Data Encryption Software: You are logged in as [" + name + "]: (Normal User@DataEncryption)" );
	    					homePanel.setVisible( true );
	    				}
	    			}
	    			else
	    			{
	    				JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Invalid password; Reenter password", "Error", JOptionPane.ERROR_MESSAGE );
	    				pword.setText("");
	    				return;
	    			}	    		
	    		}
	    		else
	    		{
	    			JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Invalid Username; Reenter username", "Error", JOptionPane.ERROR_MESSAGE );
	    			uname.setText("");
	    			return;
	    		}
	    		
    		
    	}
   
    	catch( SQLException exception )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, exception.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	catch( ClassNotFoundException exception )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, exception.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
        // TODO add your handling code here:
        finally
        {
        	try
        	{
        		connection.close();
        		statement.close();
        	}
        	catch( Exception e )
    		{
    			JOptionPane.showMessageDialog( U07CS1087_MainClass.this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );
    			return;
    		}
        }

    }                                     

    private void loginActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        String user = uname.getText();
    	String pw = new String( pword.getPassword() );
    	String nameCheck = "";
    	String pwCheck = "";
    	String accessCheck = "";
    	Connection connection = null;
    	Statement statement = null;
    	if( uname.getText().equals(""))
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Username field cannot be empty", "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	if( new String(pword.getPassword()).equals("") )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Password field cannot be empty", "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	try
    	{
    		Class.forName( "com.mysql.jdbc.Driver" );
    		connection = DriverManager.getConnection( "jdbc:mysql://localhost/users", "root", "" );
    		statement = connection.createStatement();
    		String query = "SELECT name, username, password, access FROM user_details WHERE username = \"" + user + "\"";
    		ResultSet resultSet = statement.executeQuery( query );
    		int i = resultSet.findColumn( "username" );
    		int j = resultSet.findColumn( "password" );
    		int k = resultSet.findColumn( "access" );
    		int a = resultSet.findColumn( "name" );
    		
    		resultSet.next();
    		
    		nameCheck = resultSet.getString( i );
    		pwCheck = resultSet.getString( j );    		
    		accessCheck = resultSet.getString( k );
    		
    		String name = resultSet.getString( a );
    		
	    	if( nameCheck.equals( user ))
	    		{
	    		if( pwCheck.equals( pw ))
	    			{
	    			if( accessCheck.equals( "Admin User"))
	    				{
	    					loggedUser = "Admin User";
	    					loginPanel.setVisible( false );
	    					setTitle( "Data Encryption Software: You are logged in as [" + name + "]: (Admin User@DataEncryption)" );
	    					homePanel.setVisible( true );
	    				}
	    			else
	    				{
	    					loggedUser = "Normal User";
	    					loginPanel.setVisible( false );
	    					setTitle( "Data Encryption Software: You are logged in as [" + name + "]: (Normal User@DataEncryption)" );
	    					homePanel.setVisible( true );
	    				}
	    			}
	    			else
	    			{
	    				JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Invalid password; Reenter password", "Error", JOptionPane.ERROR_MESSAGE );
	    				pword.setText("");
	    				return;
	    			}	    		
	    		}
	    		else
	    		{
	    			JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Invalid Username; Reenter username", "Error", JOptionPane.ERROR_MESSAGE );
	    			uname.setText("");
	    			return;
	    		}
	    		
    		
    	}
   
    	catch( SQLException exception )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, exception.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	catch( ClassNotFoundException exception )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, exception.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
        // TODO add your handling code here:
        finally
        {
        	try
        	{
        		connection.close();
        		statement.close();
        	}
        	catch( Exception e )
    		{
    			JOptionPane.showMessageDialog( U07CS1087_MainClass.this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );
    			return;
    		}
        }

    }
    
    private boolean userType( String s )
    {
    	if( s.equals( "Admin User" ))
    		return true;
    		else
    			return false;
    }

    private void helpActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        if( helpPanel.isVisible())
        {
            helpPanel.setVisible( false );
        }
        else
        {
            helpPanel.setVisible( true );
        }
        
    }                                    

    private void encHomeActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        homePanel.setVisible( false );
        encPanel.setVisible( true );
    }                                       

    private void proceedActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        decHomePanel.setVisible( false );
        decPanel.setVisible( true );
    }                                       

    private void readActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        decHomePanel.setVisible( false);
        readPanel.setVisible( true );
    }                                    

    private void canDecActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        decHomePanel.setVisible( false );
        homePanel.setVisible( true );
    }                                      

    private void decHomeActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        homePanel.setVisible( false );
        decHomePanel.setVisible( true );
    }                                       

    private void userActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        if( userType( loggedUser ))
        {
        	homePanel.setVisible( false );
        	userPanel.setVisible( true );
        }
        else
        {
        	JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "You are not an administrative user.\nThis function is only enabled for admin users.", "Access Denied", JOptionPane.ERROR_MESSAGE );
    		return;
        }
        
        
    }                                    

    private void logoutActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        uname.setText( "" );
        pword.setText( "" );
        homePanel.setVisible( false );
        setTitle( "Data Encryption Software" );
        loginPanel.setVisible( true );
    }                                      

    private void browseActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
       JFileChooser fChooser = new JFileChooser();
        FileNameExtensionFilter fF = new FileNameExtensionFilter("Word Documents & Text Files", "txt", "doc");
        fChooser.addChoosableFileFilter(fF);
        fChooser.setFileFilter( fF );
        fChooser.setFileSelectionMode( JFileChooser.FILES_AND_DIRECTORIES );
        int chosen = fChooser.showOpenDialog( null );
        //fChooser.setVisible( true );
        
        if( chosen == JFileChooser.CANCEL_OPTION )
        	return;
       
        File fileName = fChooser.getSelectedFile();
        
        if( ( fileName == null) || fileName.getName().equals(""))
        {
        	JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Invalid File Name", "Error", JOptionPane.ERROR_MESSAGE );
        	return;
        }
        	
        fPath.setText( fileName.toString() );
      
      	//openFile open = new openFile( U07CS1087_MainClass.this, true );
    }                                      

    private void doneActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        String fileName =  fPath.getText();
        String text = "";
        if( fileName.equals( "" ))
        {
        	JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "No file selected, enter filename to continue", "Error", JOptionPane.ERROR_MESSAGE );
        	return;
        }
                try
                {
                        File file = new File( fileName );
                        FileInputStream inputStream = new FileInputStream( file );
                        ObjectInputStream objInput = new ObjectInputStream( inputStream );
                        text += ( String )objInput.readObject();	
                        objInput.close();

                }
                catch( FileNotFoundException e )
                {
                        JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Error", e.getMessage(), JOptionPane.ERROR_MESSAGE);
                        return;
                }
                catch( IOException e )
                {
                        JOptionPane.showMessageDialog( U07CS1087_MainClass.this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                }
                catch( ClassNotFoundException e )
                {
                        JOptionPane.showMessageDialog( U07CS1087_MainClass.this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                }
                

                
                readPanel.setVisible( false );
                decTextArea.setText( text );
                
                decPanel.setVisible( true );
                
                
        			
    }                                    

    private void canReadActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        fPath.setText( "" );
        readPanel.setVisible( false );
        decHomePanel.setVisible( true );
    }                                       

    private void homeActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        encPanel.setVisible( false );
        homePanel.setVisible( true );
    }                                    

    private void encButtActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        enc = encTextArea.getText();
        undo = enc;
        if( enc.trim().equals("") )
        {
        	JOptionPane.showMessageDialog(U07CS1087_MainClass.this, "Please enter some text to continue\nCannot encrypt empty text", "Pause", JOptionPane.ERROR_MESSAGE );
        	return;
        }
        publicKey = JOptionPane.showInputDialog(U07CS1087_MainClass.this, "Enter Public Key for Encryption");
      if( publicKey.length() <= 3 )
        {
           	JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Public Key is too short, please enter another key", "Retry", JOptionPane.INFORMATION_MESSAGE );
           	return;
	
        }

        encTextArea.setText("");
        encPanel.setVisible(false);
        encrypted.setText( new EncryptionClass( publicKey ).mappedEncryption( publicKey ) + "?" + new EncryptionClass( enc ).encrypt( enc ));
        encryptedPanel.setVisible( true );
        JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Public key is \"" + publicKey + "\".\n\nPlease keep it safe", "Success", JOptionPane.INFORMATION_MESSAGE );

    }                                       

    private void clearEncButtActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        if( encTextArea.getText().equals( "" ))
        	return;
        else
        {
        int ask = JOptionPane.showConfirmDialog( U07CS1087_MainClass.this, "Are you sure you want to delete\nthe text?", "Warning!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE );
        if( ask == 0 )
        {
        	encTextArea.setText("");
        }
        else
        {
        	
        }
        }
    }                                            

    private void home1ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        encryptedPanel.setVisible( false );
        homePanel.setVisible( true );
    }                                     

    private void saveActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        String toSave = encrypted.getText();
        JFileChooser fChooser = new JFileChooser();
        FileNameExtensionFilter fF = new FileNameExtensionFilter("Word Documents & Text Files", "txt", "doc");
        fChooser.addChoosableFileFilter(fF);
        fChooser.setFileFilter( fF );
        fChooser.setFileSelectionMode( JFileChooser.FILES_AND_DIRECTORIES );
        int chosen = fChooser.showSaveDialog( null );
        //fChooser.setVisible( true );
        
        if( chosen == JFileChooser.CANCEL_OPTION )
        	return;
       
        File f = fChooser.getSelectedFile();
        
        if( ( f == null) || f.getName().equals(""))
        {
        	JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Invalid File Name", "Error", JOptionPane.ERROR_MESSAGE );
        	return;
        }
        	
 
        String fileName = f.toString();
                	
        try
        {
        	File file = new File( fileName );
        	FileOutputStream outputStream = new FileOutputStream( file );
        	ObjectOutputStream objOutput = new ObjectOutputStream( outputStream );
        	objOutput.writeObject( toSave);
        	objOutput.close();
        	JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Success", "File successfully saved into " + fileName, JOptionPane.INFORMATION_MESSAGE );
        }
        catch( IOException e )
        {
        	JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Error", e.getMessage(), JOptionPane.ERROR_MESSAGE );
        }
       
        encryptedPanel.setVisible( false );
        homePanel.setVisible(true);
    }                                    

    private void backEncActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        encTextArea.setText( undo );
        encryptedPanel.setVisible( false );
        encPanel.setVisible( true );
    }                                       

    private void home2ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        decPanel.setVisible( false );
        homePanel.setVisible( true );
    }                                     
    private void processText( String text )
	{
        DecryptionClass decClass = new DecryptionClass( "abc" );
        enc = text;
        String keyDecrypt = enc.substring( 0, enc.indexOf( '?' ));
        String key = decClass.mappedDecryption( keyDecrypt );
        keyCheck = key.toLowerCase();
        check = enc.substring(0 , 2);
        String toDecrypt = enc.substring( enc.indexOf( '?' ) + 1, enc.length());
        cipherText = toDecrypt;
        publicKey = JOptionPane.showInputDialog( U07CS1087_MainClass.this, "Enter Public Key for Decryption");
        String pubKey = publicKey.toLowerCase();
        enteredKey = pubKey;
	}
    private void decButtActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        undo = decTextArea.getText();
        if( decTextArea.getText().equals(""))
        {
   	        JOptionPane.showMessageDialog(U07CS1087_MainClass.this, "Invalid Input; Cannot decrypt empty text. Click home to \nread directly from file (.doc and .txt only)", "Retry", JOptionPane.ERROR_MESSAGE );
        	return;
        }
            processText( decTextArea.getText());	
        
        if( !check.equals("<%") )
        {
        	JOptionPane.showMessageDialog(U07CS1087_MainClass.this, "Invalid Input; Please recopy the text\nor Click home to read directly from file (.txt only)", "Retry", JOptionPane.ERROR_MESSAGE );
        	return;
        }
		else if( publicKey.equals("") || (publicKey == null))
        {
        	JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Cannot accept empty key, please enter a valid key", "Retry", JOptionPane.INFORMATION_MESSAGE );
           	return;
        }
        else if( !(enteredKey.equals(keyCheck)))
        	{
        		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Invalid Decryption Key, please enter a valid key", "Retry", JOptionPane.INFORMATION_MESSAGE );
           		return;	
        	}
        else 
        	{
        	decTextArea.setText("");
        	decPanel.setVisible(false);
        	decrypted.setText( new DecryptionClass( enc ).decrypt( cipherText ));
        	decryptedPanel.setVisible( true );
        	}
        	        	
        
               
    }

                                     

    private void clearDecButtActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        if( decTextArea.getText().equals( "" ))
        	return;
        else
        {
        int ask = JOptionPane.showConfirmDialog( U07CS1087_MainClass.this, "Are you sure you want to delete\nthe text?", "Warning!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE );
        if( ask == 0 )
        {
        	decTextArea.setText("");
        }
        else
        {
        	
        }
        }       	
    }                                            

    private void backDecActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        decTextArea.setText( undo );
        decryptedPanel.setVisible( false );
        decPanel.setVisible( true );
}                                       

    private void save1ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        String toSave = encrypted.getText();
        JFileChooser fChooser = new JFileChooser();
        FileNameExtensionFilter fF = new FileNameExtensionFilter("Word Documents & Text Files", "txt", "doc");
        fChooser.addChoosableFileFilter(fF);
        fChooser.setFileFilter( fF );
        fChooser.setFileSelectionMode( JFileChooser.FILES_AND_DIRECTORIES );
        int chosen = fChooser.showSaveDialog( null );
        //fChooser.setVisible( true );
        
        if( chosen == JFileChooser.CANCEL_OPTION )
        	return;
       
        File f = fChooser.getSelectedFile();
        
        if( ( f == null) || f.getName().equals(""))
        {
        	JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Invalid File Name", "Error", JOptionPane.ERROR_MESSAGE );
        	return;
        }
        	
 
        String fileName = f.toString();
                	
        try
        {
        	File file = new File( fileName );
        	FileOutputStream outputStream = new FileOutputStream( file );
        	ObjectOutputStream objOutput = new ObjectOutputStream( outputStream );
        	objOutput.writeObject( toSave);
        	objOutput.close();
        	JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Success", "File successfully saved into " + fileName, JOptionPane.INFORMATION_MESSAGE );
        }
        catch( IOException e )
        {
        	JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Error", e.getMessage(), JOptionPane.ERROR_MESSAGE );
        }
       
        decryptedPanel.setVisible( false );
        homePanel.setVisible(true);
}                                     

    private void home3ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        decryptedPanel.setVisible( false );
        homePanel.setVisible( true );
}                                     

    private void addActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        if( delPanel.isVisible())
        {
            delPanel.setVisible( false );
            addPanel.setVisible( true );
        }
        else
        {
            addPanel.setVisible( true );
        }
    }                                   

    private void delActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        if( addPanel.isVisible())
        {
            addPanel.setVisible( false );
            dNames.removeAllItems();
    		StringTokenizer tokenizer = new StringTokenizer( readNames(), "*");
			while( tokenizer.hasMoreTokens( ))
			{
				dNames.addItem( new String( tokenizer.nextToken()));
			}
    		delPanel.setVisible( true );
    		repaint();
        }
        else
        {
        	dNames.removeAllItems();
    		delPanel.setVisible( false );
    		StringTokenizer tokenizer = new StringTokenizer( readNames(), "*");
			while( tokenizer.hasMoreTokens( ))
			{
				dNames.addItem( new String( tokenizer.nextToken()));
			}
            delPanel.setVisible( true );
        }
    }                                   

    private void logout1ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        addPanel.setVisible( false );
        delPanel.setVisible( false );
        userPanel.setVisible( false );
        homePanel.setVisible( true );
    }                                       

    private void detFullActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }                                       

    private void detNameActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }                                       

    private void jComboBox1ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }                                          

    private void okActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        Connection connection = null;
        Statement statement = null;
        String nm = detFull.getText();
        String un = detName.getText();
        String pw = detPass.getText();
        Object al = jComboBox1.getSelectedItem();
        String ak = new String( al.toString() );
        
   		String query = "INSERT into user_details VALUES('" + nm + "','" + un + "','" + pw + "','" + ak + "')";
        //System.out.println( query );
        if( nm.equals("") || un.equals("") || pw.equals("") )
        {
        	JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "All Fields are required, retry", "Warning", JOptionPane.ERROR_MESSAGE );
        	return;
        }
    	try
		{
			Class.forName( "com.mysql.jdbc.Driver" );
    		connection = DriverManager.getConnection( "jdbc:mysql://localhost/users", "root", "" );
    		statement = connection.createStatement();
    		statement.executeUpdate( query );
    		addPanel.setVisible( false );
    		detFull.setText( "" );
    		detName.setText( "" );
    		detPass.setText( "" );
    		repaint();
    		dNames.removeAllItems();
    		StringTokenizer tokenizer = new StringTokenizer( readNames(), "*");
			while( tokenizer.hasMoreTokens( ))
			{
				dNames.addItem( new String( tokenizer.nextToken()));
			}
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "User \"" + nm + "\" successfully added", "Success", JOptionPane.INFORMATION_MESSAGE );
    		addPanel.setVisible( true );
		}
		catch( SQLException exception )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, exception.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	catch( ClassNotFoundException exception )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, exception.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	finally
        {
        	try
        	{
        		connection.close();
        		statement.close();
        	}
        	catch( Exception exception )
    		{
    			JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Unable to close Database or Connection", "Error", JOptionPane.ERROR_MESSAGE );
    			return;
    		}
        }
    }                                  

    private void done2ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        Connection connection = null;
        Statement statement = null;
        String nm = detFull.getText();
        String un = detName.getText();
        String pw = detPass.getText();
        Object al = jComboBox1.getSelectedItem();
        String ak = new String( al.toString() );
        
   		String query = "INSERT into user_details VALUES('" + nm + "','" + un + "','" + pw + "','" + ak + "')";
        //System.out.println( query );
        if( nm.equals("") || un.equals("") || pw.equals("") )
        {
        	JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "All Fields are required, retry", "Warning", JOptionPane.ERROR_MESSAGE );
        	return;
        }
    	try
		{
			Class.forName( "com.mysql.jdbc.Driver" );
    		connection = DriverManager.getConnection( "jdbc:mysql://localhost/users", "root", "" );
    		statement = connection.createStatement();
    		statement.executeUpdate( query );
    		addPanel.setVisible( false );
    		detFull.setText( "" );
    		detName.setText( "" );
    		detPass.setText( "" );
    		repaint();
    		dNames.removeAllItems();
    		StringTokenizer tokenizer = new StringTokenizer( readNames(), "*");
			while( tokenizer.hasMoreTokens( ))
			{
				dNames.addItem( new String( tokenizer.nextToken()));
			}
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "User \"" + nm + "\" successfully added", "Success", JOptionPane.INFORMATION_MESSAGE );
		}
		catch( SQLException exception )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, exception.getMessage(), "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	catch( ClassNotFoundException exception )
    	{
    		JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Unable to open database, Please try again!", "Error", JOptionPane.ERROR_MESSAGE );
    		return;
    	}
    	finally
        {
        	try
        	{
        		connection.close();
        		statement.close();
        	}
        	catch( Exception exception )
    		{
    			JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Unable to close Database or Connection", "Error", JOptionPane.ERROR_MESSAGE );
    			return;
    		}
        }
    }                                     

    private void fPathFocusGained(FocusEvent evt) {
        // TODO add your handling code here:
    }                                 

    private void fPathActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
        String fileName =  fPath.getText();
        String text = "";
        if( fileName == null)
                return;
                try
                {
                        File file = new File( fileName );
                        FileInputStream inputStream = new FileInputStream( file );
                        ObjectInputStream objInput = new ObjectInputStream( inputStream );
                        text += ( String )objInput.readObject();	
                        objInput.close();

                }
                catch( FileNotFoundException e )
                {
                        JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "File Not Found!", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                }
                catch( IOException e )
                {
                        JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "Cannot read from file", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                }
                catch( ClassNotFoundException e )
                {
                        JOptionPane.showMessageDialog( U07CS1087_MainClass.this, "File cannot be found, retry", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                }
                
                readPanel.setVisible( false );
                decTextArea.setText( text );
                
                decPanel.setVisible( true );
                
                
    }                                     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        U07CS1087_MainClass classA = new U07CS1087_MainClass();
        classA.setVisible( true );
       }
     
   
    private String enc = "";
    private String enteredKey = "";
    private String check = "";
    private String publicKey = "";
    private String keyCheck = "";
    private String cipherText = "";
    private String loggedUser = "";
    String undo = "";
    
    // Variables declaration - do not modify
    private JButton add;
    private JPanel addPanel;
    private JButton backDec;
    private JButton backEnc;
    private JButton browse;
    private JButton canDec;
    private JButton canRead;
    private JButton cancel;
    private JButton clearDecButt;
    private JButton clearEncButt;
    private JComboBox dNames;
    private JButton decButt;
    private JButton decHome;
    private JPanel decHomePanel;
    private JPanel decPanel;
    private JTextArea decTextArea;
    private JTextArea decrypted;
    private JPanel decryptedPanel;
    private JButton del;
    private JPanel delPanel;
    private JTextField detFull;
    private JTextField detName;
    private JTextField detPass;
    private JButton done;
    private JButton done2;
    private JButton encButt;
    private JButton encHome;
    private JPanel encPanel;
    private JTextArea encTextArea;
    private JTextArea encrypted;
    private JPanel encryptedPanel;
    public static JTextField fPath;
    private JButton help;
    private JScrollPane helpPane;
    private JPanel helpPanel;
    private JButton home;
    private JButton home1;
    private JButton home2;
    private JButton home3;
    private JPanel homePanel;
    private JComboBox jComboBox1;
    private JLabel softwareTitle;
    private JLabel jLabel10;
    private JLabel jLabel11;
    private JLabel jLabel12;
    private JLabel jLabel13;
    private JLabel jLabel14;
    private JLabel jLabel15;
    private JLabel jLabel16;
    private JLabel jLabel17;
    private JLabel jLabel18;
    private JLabel jLabel19;
    private JLabel loginLabel;
    private JLabel jLabel20;
    private JLabel jLabel21;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JPanel jPanel1;
    private JPanel jPanel10;
    private JPanel jPanel11;
    private JPanel jPanel12;
    private JPanel jPanel13;
    private JPanel jPanel14;
    private JPanel jPanel15;
    private JPanel jPanel16;
    private JPanel jPanel17;
    private JPanel jPanel18;
    private JPanel jPanel19;
    private JPanel jPanel20;
    private JPanel jPanel21;
    private JPanel jPanel22;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JPanel jPanel5;
    private JPanel jPanel6;
    private JPanel jPanel7;
    private JPanel jPanel8;
    private JPanel jPanel9;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JScrollPane jScrollPane4;
    private JTextArea jTextArea1;
    private JButton login;
    private JPanel loginPanel;
    private JButton logout;
    private JButton logout1;
    private JButton ok;
    private JButton proceed;
    private JPasswordField pword;
    private JButton read;
    private JPanel readPanel;
    private JButton save;
    private JButton save1;
    private JTextField uname;
    public JButton user;
    private JButton userDel;
    private JPanel userPanel;
    // End of variables declaration
}



